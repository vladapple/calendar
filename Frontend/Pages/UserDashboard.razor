@page "/UserDashboard"

@using System;
@using System.Collections.Generic;
@using System.Linq;
@using Frontend.Models
@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Inputs
@using System.Security.Claims
@inject NavigationManager NavManager
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject ILocalStorageService LocalStorageService
@inject AuthenticationStateProvider AuthService

<style>
    .event-small {
        box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;
        display: inline-block;
        margin: 5px;
    }
</style>

   <h3>Hi @currentUser.Username, welcome to your dashboard</h3>
<br />
<div>
    <div class="row">
        <div class="col-md-12">
            <h4>Your Events</h4>
            @if (organizedEvents == null)
            {
                <p>Nothing to show</p>
            }
            else
            {
               @foreach (var e in organizedEvents)
                {
                    <div class="card event-small" style="width: 18rem;">
                    <div class="card-body">
                        <h5 class="card-title">@e.EventName</h5>
                            <h6 class="card-subtitle">@e.EventCategory.CategoryName<br />@e.Start.Date.ToLongDateString()<br/>@e.Start.ToShortTimeString() - @e.End.ToShortTimeString()</h6>
                            <p class="card-text mb-2 text-muted">@e.Descr</p>
                    </div>
                    <div class="card-footer">
                        <a href="#" class="card-link">Details</a>
                    </div>
                </div>
                } 
            }      
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            <h4>Events You're Attending</h4>
            @if (organizedEvents == null)
            {
                <p>Nothing to show</p>
            }
            else
            {
                @foreach (var a in attendingEvents)
                {
                    <div>@a.Event.EventName</div>
                }
            }
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            <h4>Your Event Reviews</h4>
            @if (eventReviews == null)
            {
                <p>Nothing to show</p>
            }
            else
            {
                @foreach (var e in eventReviews)
                {
                    <div>@e.Event.EventName</div>
                }
            }
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            <h4>Your Venue Reviews</h4>
            @if (venueReviews == null)
            {
                    <p>Nothing to show</p>
            }
            else
            {
                @foreach (var v in venueReviews)
                {
                            <div>@v.Venue.VenueName</div>
                }
            }
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            <h4>Profile</h4>
            <a href="/UserContact">Event Organizer Settings</a>
            <br />
            <a href=#>link2</a>
            <br />
            <a href=#>link3</a>
            <br />
        </div>
    </div>
</div>
    

@code {
    private AuthenticationState authState;

    private User? currentUser { get; set; }
    private int userId { get; set; }

    private List<Event>? organizedEvents { get; set; }

    private List<Attending>? attendingEvents { get; set; }

    private List<EventReview>? eventReviews { get; set; }

    private List<VenueReview>? venueReviews { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            authState = await AuthService.GetAuthenticationStateAsync();
            var user = authState.User;
            userId = int.Parse(user.FindFirst(c => c.Type == ClaimTypes.SerialNumber)?.Value);
            currentUser = await Http.GetFromJsonAsync<User>($"api/Users/{userId}");

            organizedEvents = await Http.GetFromJsonAsync<List<Event>>($"api/Events/user/{userId}");
            //organizedEvents.OrderBy(e => e.Start);
            attendingEvents = await Http.GetFromJsonAsync<List<Attending>>($"api/Attending/user/{userId}");
            //attendingEvents.OrderByDescending(e => e.Event.Start.Date);
            eventReviews = await Http.GetFromJsonAsync<List<EventReview>>($"api/EventReviews/user/{userId}");
            venueReviews = await Http.GetFromJsonAsync<List<VenueReview>>($"api/VenueReviews/user/{userId}");


        }
        catch (NullReferenceException)
        {
            throw;
        }
    }

}
